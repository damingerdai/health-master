"use client";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { z } from "zod";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";

const schemas = z
  .object({
    username: z
      .string()
      .min(1, "Username is required")
      .regex(
        /^[A-Za-z0-9]+$/,
        "Username must contain only letters and numbers",
      ),
    firstName: z.string().min(1, "First name is required"),
    lastName: z.string().min(1, "Last name is required"),
    gender: z
      .string()
      .regex(/^[MFU]$/, { message: "Gender must be M or F" })
      .optional(),
    password: z
      .string()
      .min(1, "Password is required")
      .regex(
        /^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{8,16}$/,
        "Password must contain both letters and numbers, and be 8-16 characters long",
      ),
    confirmPassword: z.string().min(1, "Please confirm your password"),
  })
  .refine((data) => data.password === data.confirmPassword, {
    message: "Passwords do not match",
    path: ["confirmPassword"],
  });
type InputData = z.infer<typeof schemas>;

export function RegistryForm({
  className,
  ...props
}: React.ComponentProps<"form">) {
  const defaultValues: InputData = {
    username: "",
    firstName: "",
    lastName: "",
    gender: "U",
    password: "",
    confirmPassword: "",
  };
  const form = useForm({ resolver: zodResolver(schemas), defaultValues });
  console.log(form.formState);

  return (
    <Form {...form}>
      <form
        className={cn("flex flex-col gap-6", className)}
        {...props}
        onSubmit={form.handleSubmit((data: InputData) => {
          console.log(data);
          alert("hello world");
        })}
      >
        <div className="flex flex-col items-center gap-2 text-center">
          <h1 className="text-2xl font-bold">Wellcome to Heath Master</h1>
        </div>
        <div className="grid gap-6">
          <div className="grid gap-3">
            <FormField
              control={form.control}
              name="username"
              render={({ field }) => {
                return (
                  <FormItem>
                    <FormLabel>Username</FormLabel>
                    <FormControl>
                      <Input {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                );
              }}
            ></FormField>
          </div>
          <div className="grid gap-3">
            <FormField
              control={form.control}
              name="firstName"
              render={({ field }) => {
                return (
                  <FormItem>
                    <FormLabel>First Name</FormLabel>
                    <FormControl>
                      <Input {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                );
              }}
            />
          </div>
          <div className="grid gap-3">
            <FormField
              control={form.control}
              name="lastName"
              render={({ field }) => {
                return (
                  <FormItem>
                    <FormLabel>Last Name</FormLabel>
                    <FormControl>
                      <Input {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                );
              }}
            />
          </div>
          <div className="gird gap-3">
            <FormField
              control={form.control}
              name="gender"
              render={({ field }) => {
                return (
                  <FormItem>
                    <FormLabel>Gender</FormLabel>
                    <FormControl>
                      <RadioGroup onChange={field.onChange()}></RadioGroup>
                    </FormControl>
                  </FormItem>
                );
              }}
            />
          </div>
          <div className="grid gap-3">
            <Label htmlFor="gender">Gender</Label>
            <RadioGroup id="gender" defaultValue="U">
              <div className="flex items-center space-x-2">
                <RadioGroupItem value="M" id="gender-m" />
                <Label htmlFor="gender-m">Man</Label>
              </div>
              <div className="flex items-center space-x-2">
                <RadioGroupItem value="F" id="gender-f" />
                <Label htmlFor="gender-f">Felman</Label>
              </div>
              <div className="flex items-center spce-x-2">
                <RadioGroupItem value="U" id="gender-u" />
                <Label htmlFor="gender-u"> Unkown</Label>
              </div>
            </RadioGroup>
          </div>
          <div className="grid gap-3">
            <div className="flex items-center">
              <Label htmlFor="password">Password</Label>
            </div>
            <Input id="password" type="password" />
          </div>
          <div className="grid gap-3">
            <div className="flex items-center">
              <Label htmlFor="confirmPassword">Confirm Password</Label>
            </div>
            <Input id="confirmPassword" type="password" />
          </div>

          <Button type="submit" className="w-full">
            Sign up
          </Button>
        </div>
        <div className="text-center text-sm">
          Do you have an account?{" "}
          <a href="sign-in" className="underline underline-offset-4">
            Sign in
          </a>
        </div>
      </form>
    </Form>
  );
}
